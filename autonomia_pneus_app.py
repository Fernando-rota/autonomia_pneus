import streamlit as st
import pandas as pd
import plotly.express as px
import re

st.set_page_config(page_title="Gest√£o de Pneus", layout="wide")
st.title("üìä Gest√£o de Pneus - Dashboard Interativo")

# ----------------- UPLOAD -----------------
arquivo = st.file_uploader("Carregue a planilha de pneus", type=["xlsx", "xls"])

if arquivo:
    df = pd.read_excel(arquivo, engine="openpyxl")

    # ----------------- TRATAMENTO DE DADOS -----------------
    def extrair_km(texto):
        if pd.isna(texto):
            return None
        match = re.search(r"(\d+)\s*km", str(texto))
        if match:
            return int(match.group(1))
        return None

    df["Observa√ß√£o - Km"] = df["Observa√ß√£o"].apply(extrair_km)
    df["Km Rodado at√© Aferi√ß√£o"] = df["Observa√ß√£o - Km"] - df["Hod√¥metro Inicial"]
    df["Km Rodado at√© Aferi√ß√£o"] = df["Km Rodado at√© Aferi√ß√£o"].fillna(0)
    df["Tipo Pneu"] = df["Vida"].fillna("Novo")

    # ----------------- ABAS -----------------
    aba1, aba2, aba3, aba4 = st.tabs(["üìå Indicadores", "üìà Gr√°ficos", "üìë Tabela Completa", "üìä Hist√≥rico de Trocas"])

    # ----------------- INDICADORES -----------------
    with aba1:
        st.subheader("üìå KPIs Gerais")
        total_pneus = df["Refer√™ncia"].nunique()
        estoque = df["Status"].value_counts().get("Estoque", 0)
        sucata = df["Status"].value_counts().get("Sucata", 0)
        caminhao = df["Status"].value_counts().get("Caminh√£o", 0)

        col1, col2, col3, col4 = st.columns(4)
        col1.metric(label="üõû Total Pneus", value=f"{total_pneus:,}", delta=None)
        col2.metric(label="üì¶ Estoque", value=f"{estoque:,}", delta=None)
        col3.metric(label="‚ôªÔ∏è Sucata", value=f"{sucata:,}", delta=None)
        col4.metric(label="üöö Caminh√£o", value=f"{caminhao:,}", delta=None)

        col5, col6, col7 = st.columns(3)
        media_sulco = df["Aferi√ß√£o - Sulco"].dropna().mean()
        media_km = df["Km Rodado at√© Aferi√ß√£o"].dropna().mean()
        pneus_criticos = df[df["Aferi√ß√£o - Sulco"] < 2]
        perc_critico = len(pneus_criticos) / len(df) * 100 if len(df) > 0 else 0

        # Indicadores maiores usando markdown
        col5.markdown(f"<h2 style='text-align:center; color:green;'>{media_sulco:.2f} mm</h2><p style='text-align:center;'>M√©dia Sulco</p>", unsafe_allow_html=True)
        col6.markdown(f"<h2 style='text-align:center; color:blue;'>{media_km:,.0f} km</h2><p style='text-align:center;'>M√©dia Km at√© Aferi√ß√£o</p>", unsafe_allow_html=True)
        col7.markdown(f"<h2 style='text-align:center; color:red;'>{len(pneus_criticos)}</h2><p style='text-align:center;'>Pneus Cr√≠ticos (<2mm)</p><p style='text-align:center;'>{perc_critico:.1f}%</p>", unsafe_allow_html=True)

    # ----------------- GR√ÅFICOS -----------------
    with aba2:
        st.subheader("üìà Gr√°ficos Interativos")

        if not df.empty and "Km Rodado at√© Aferi√ß√£o" in df.columns and "Aferi√ß√£o - Sulco" in df.columns:
            st.markdown("**Gr√°fico 1: Rela√ß√£o Km Rodado x Sulco**  \nVisualiza como o desgaste do pneu (sulco em mm) est√° relacionado com a quilometragem rodada. Cada ponto representa um pneu e √© colorido pelo tipo de pneu.")
            fig1 = px.scatter(
                df,
                x="Km Rodado at√© Aferi√ß√£o",
                y="Aferi√ß√£o - Sulco",
                color="Tipo Pneu",
                hover_data=["Ve√≠culo - Placa", "Modelo (Atual)", "Marca (Atual)", "Status"],
                title="Rela√ß√£o Km Rodado x Sulco",
                color_discrete_sequence=px.colors.qualitative.Set2,
                height=500
            )
            st.plotly_chart(fig1, use_container_width=True)

        st.markdown("**Gr√°fico 2: Distribui√ß√£o do Sulco por Marca**  \nMostra a varia√ß√£o do sulco dos pneus de cada marca, permitindo identificar quais marcas tendem a durar mais ou menos.")
        fig2 = px.box(
            df,
            x="Marca (Atual)",
            y="Aferi√ß√£o - Sulco",
            color="Marca (Atual)",
            title="Distribui√ß√£o do Sulco por Marca",
            color_discrete_sequence=px.colors.qualitative.Pastel,
            height=500
        )
        st.plotly_chart(fig2, use_container_width=True)

    # ----------------- TABELA -----------------
    with aba3:
        st.subheader("üìë Tabela Completa")
        status_filter = st.multiselect("Filtrar por Status", options=df["Status"].unique(), default=df["Status"].unique())
        df_filtrado = df[df["Status"].isin(status_filter)]

        def colorir_sulco(val):
            if pd.isna(val):
                return ""
            elif val < 2:
                return "background-color: #FF6B6B; color: white"
            elif val < 4:
                return "background-color: #FFD93D; color: black"
            else:
                return "background-color: #6BCB77; color: white"

        st.dataframe(df_filtrado.style.applymap(colorir_sulco, subset=["Aferi√ß√£o - Sulco"]), use_container_width=True)

    # ----------------- HIST√ìRICO DE TROCAS -----------------
    with aba4:
        st.subheader("üìä Hist√≥rico de Trocas e Vida √ötil dos Pneus")
        if not df.empty:
            resumo = df.groupby("Tipo Pneu")["Km Rodado at√© Aferi√ß√£o"].agg(
                Total_Pneus="count",
                Km_M√©dio="mean",
                Km_M√≠nimo="min",
                Km_M√°ximo="max"
            ).reset_index()

            resumo["Km_M√©dio"] = resumo["Km_M√©dio"].apply(lambda x: f"{x:,.0f} km")
            resumo["Km_M√≠nimo"] = resumo["Km_M√≠nimo"].apply(lambda x: f"{x:,.0f} km")
            resumo["Km_M√°ximo"] = resumo["Km_M√°ximo"].apply(lambda x: f"{x:,.0f} km")

            st.dataframe(resumo, use_container_width=True)

            fig3 = px.bar(
                df.groupby("Tipo Pneu")["Km Rodado at√© Aferi√ß√£o"].mean().reset_index(),
                x="Tipo Pneu",
                y="Km Rodado at√© Aferi√ß√£o",
                text="Km Rodado at√© Aferi√ß√£o",
                title="Km M√©dio por Tipo de Pneu",
                color="Tipo Pneu",
                color_discrete_sequence=px.colors.qualitative.Set2,
                height=500
            )
            fig3.update_traces(texttemplate='%{y:.0f} km', textposition='outside')
            st.plotly_chart(fig3, use_container_width=True)
