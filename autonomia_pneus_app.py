import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Painel de Manuten√ß√£o e Movimenta√ß√£o de Pneus", layout="wide")

st.title("üìä Painel de Manuten√ß√£o e Movimenta√ß√£o de Pneus")
st.markdown("‚¨ÜÔ∏è Fa√ßa upload da planilha com as abas 'manutencao' e 'pneu'")

uploaded_file = st.file_uploader("Upload da Planilha Excel", type=["xlsx"])

if uploaded_file:
    xls = pd.ExcelFile(uploaded_file)

    if 'manutencao' in xls.sheet_names and 'pneu' in xls.sheet_names:
        df_manut = pd.read_excel(xls, sheet_name='manutencao')
        df_pneu = pd.read_excel(xls, sheet_name='pneu')

        # Normaliza colunas
        df_manut.columns = df_manut.columns.str.strip().str.upper()
        df_pneu.columns = df_pneu.columns.str.strip().str.upper()

        # Convers√£o de datas
        if 'DATA DA MANUTEN√á√ÉO' in df_manut.columns:
            df_manut['DATA DA MANUTEN√á√ÉO'] = pd.to_datetime(df_manut['DATA DA MANUTEN√á√ÉO'], errors='coerce')
        if 'DATA DA MOVIMENTA√á√ÉO' in df_pneu.columns:
            df_pneu['DATA DA MOVIMENTA√á√ÉO'] = pd.to_datetime(df_pneu['DATA DA MOVIMENTA√á√ÉO'], errors='coerce')

        # Converter VALOR para num√©rico (pneu)
        if 'VALOR' in df_pneu.columns:
            df_pneu['VALOR'] = pd.to_numeric(df_pneu['VALOR'], errors='coerce')

        # Padroniza coluna PLACA
        for df in [df_manut, df_pneu]:
            if 'VE√çCULO - PLACA' in df.columns:
                df.rename(columns={'VE√çCULO - PLACA': 'PLACA'}, inplace=True)

        # Checar colunas obrigat√≥rias
        if 'PLACA' not in df_manut.columns or 'PLACA' not in df_pneu.columns:
            st.error("‚ùå Coluna PLACA √© obrigat√≥ria nas duas abas.")
        else:
            # Filtros
            placas = sorted(set(df_manut['PLACA'].dropna().unique()) | set(df_pneu['PLACA'].dropna().unique()))
            selected_placas = st.sidebar.multiselect("Selecione as Placas", placas, default=placas)

            # Filtro datas com valores m√≠nimos e m√°ximos combinados
            data_min_manut = df_manut['DATA DA MANUTEN√á√ÉO'].min() if 'DATA DA MANUTEN√á√ÉO' in df_manut.columns else None
            data_max_manut = df_manut['DATA DA MANUTEN√á√ÉO'].max() if 'DATA DA MANUTEN√á√ÉO' in df_manut.columns else None
            data_min_pneu = df_pneu['DATA DA MOVIMENTA√á√ÉO'].min() if 'DATA DA MOVIMENTA√á√ÉO' in df_pneu.columns else None
            data_max_pneu = df_pneu['DATA DA MOVIMENTA√á√ÉO'].max() if 'DATA DA MOVIMENTA√á√ÉO' in df_pneu.columns else None

            data_min = min(filter(None, [data_min_manut, data_min_pneu]))
            data_max = max(filter(None, [data_max_manut, data_max_pneu]))

            selected_data = st.sidebar.date_input("Selecione intervalo de datas", [data_min, data_max])

            # Aplica filtros
            if selected_placas:
                df_manut = df_manut[df_manut['PLACA'].isin(selected_placas)]
                df_pneu = df_pneu[df_pneu['PLACA'].isin(selected_placas)]

            if len(selected_data) == 2:
                start_date, end_date = pd.to_datetime(selected_data[0]), pd.to_datetime(selected_data[1])
                if 'DATA DA MANUTEN√á√ÉO' in df_manut.columns:
                    df_manut = df_manut[(df_manut['DATA DA MANUTEN√á√ÉO'] >= start_date) & (df_manut['DATA DA MANUTEN√á√ÉO'] <= end_date)]
                if 'DATA DA MOVIMENTA√á√ÉO' in df_pneu.columns:
                    df_pneu = df_pneu[(df_pneu['DATA DA MOVIMENTA√á√ÉO'] >= start_date) & (df_pneu['DATA DA MOVIMENTA√á√ÉO'] <= end_date)]

            st.header("üìä Indicadores Gerais")

            if df_manut.empty:
                st.warning("Nenhum dado de manuten√ß√£o ap√≥s filtro.")
            else:
                total_manut = len(df_manut)
                st.metric("Total de Manuten√ß√µes", total_manut)

                if 'DESCRI√á√ÉO DA MANUTEN√á√ÉO' in df_manut.columns:
                    manut_tipo = df_manut['DESCRI√á√ÉO DA MANUTEN√á√ÉO'].value_counts()
                    st.subheader("Tipos de Manuten√ß√£o")
                    st.dataframe(manut_tipo)

                if 'KM DO VE√çCULO' in df_manut.columns:
                    km_medio = df_manut.groupby('PLACA')['KM DO VE√çCULO'].apply(lambda x: x.sort_values().diff().mean()).dropna()
                    st.subheader("KM M√©dio entre Manuten√ß√µes por Ve√≠culo")
                    st.dataframe(km_medio.astype(int))

            if df_pneu.empty:
                st.warning("Nenhum dado de movimenta√ß√£o de pneus ap√≥s filtro.")
            else:
                total_pneu = len(df_pneu)
                st.metric("Total de Movimenta√ß√µes de Pneus", total_pneu)

                if 'TIPO DA MOVIMENTA√á√ÉO' in df_pneu.columns:
                    pneu_tipo = df_pneu['TIPO DA MOVIMENTA√á√ÉO'].value_counts()
                    st.subheader("Tipos de Movimenta√ß√£o de Pneus")
                    st.dataframe(pneu_tipo)

                if 'VALOR' in df_pneu.columns:
                    total_valor = df_pneu['VALOR'].sum()
                    st.metric("Valor Total Gasto com Pneus (R$)", f"{total_valor:,.2f}")

            # Gr√°ficos simples para confirmar visualiza√ß√£o
            st.header("üìà Gr√°ficos")

            if not df_manut.empty and 'DATA DA MANUTEN√á√ÉO' in df_manut.columns:
                fig1 = px.histogram(df_manut, x='DATA DA MANUTEN√á√ÉO', color='PLACA', nbins=30,
                                    title="Frequ√™ncia de Manuten√ß√µes por Ve√≠culo")
                st.plotly_chart(fig1, use_container_width=True)

            if not df_pneu.empty and 'TIPO DA MOVIMENTA√á√ÉO' in df_pneu.columns:
                fig2 = px.histogram(df_pneu, x='TIPO DA MOVIMENTA√á√ÉO', color='PLACA',
                                    title="Movimenta√ß√£o de Pneus por Tipo e Ve√≠culo")
                st.plotly_chart(fig2, use_container_width=True)
