import re
from io import BytesIO

import numpy as np
import pandas as pd
import plotly.express as px
import streamlit as st

# ------------------------------------
# Configura√ß√£o do app
# ------------------------------------
st.set_page_config(page_title="Gest√£o de Pneus", layout="wide")
st.title("üìä Gest√£o de Pneus")

# ------------------------------------
# Helpers
# ------------------------------------
def to_datetime_safe(s):
    """Converte para datetime (pt-BR) com seguran√ßa."""
    return pd.to_datetime(s, errors="coerce", dayfirst=True)

def to_numeric_safe(s):
    """Converte para n√∫mero aceitando v√≠rgula decimal e pontua√ß√£o de milhar."""
    if s is None:
        return np.nan
    return pd.to_numeric(
        pd.Series(s).astype(str)
        .str.replace(r"\.", "", regex=True)
        .str.replace(",", ".", regex=False),
        errors="coerce",
    ).iloc[0]

def extract_obs(texto):
    """
    Extrai Data e Km da coluna Observa√ß√£o.
    Ex.: 'Aferi√ß√£o 20/08/25 - 109418 km' -> (2025-08-20, 109418)
    """
    if pd.isna(texto):
        return pd.NaT, np.nan
    t = str(texto)

    # data dd/mm/aa(aa)
    m_data = re.search(r"(\d{2}/\d{2}/\d{2,4})", t)
    data = to_datetime_safe(m_data.group(1)) if m_data else pd.NaT

    # km com ou sem milhares + 'km'
    m_km = re.search(r"([\d\.]+|\d+)\s*km", t.replace("KM", "km"))
    if m_km:
        km_txt = m_km.group(1)
        km_num = pd.to_numeric(km_txt.replace(".", ""), errors="coerce")
    else:
        km_num = np.nan
    return data, km_num

def download_excel(df):
    out = BytesIO()
    with pd.ExcelWriter(out, engine="xlsxwriter") as w:
        df.to_excel(w, index=False, sheet_name="Dados")
    return out.getvalue()

# ------------------------------------
# Upload
# ------------------------------------
arquivo = st.file_uploader("üìÇ Envie a planilha (.xlsx)", type=["xlsx"])
if not arquivo:
    st.info("‚¨ÜÔ∏è Envie um arquivo Excel (.xlsx) para come√ßar.")
    st.stop()

# Suporte a m√∫ltiplas abas do Excel
xf = pd.ExcelFile(arquivo, engine="openpyxl")
sheet = st.selectbox("Escolha a aba da planilha:", xf.sheet_names)
df = xf.parse(sheet)

# Padroniza√ß√µes leves (n√£o quebra nomes originais)
# Datas conhecidas
for c in [c for c in df.columns if "Data" in c]:
    df[c] = to_datetime_safe(df[c])

# Sulco para num√©rico
if "Aferi√ß√£o - Sulco" in df.columns:
    df["Aferi√ß√£o - Sulco"] = df["Aferi√ß√£o - Sulco"].apply(to_numeric_safe)

# Hod√¥metro Inicial para num√©rico
if "Hod√¥metro Inicial" in df.columns:
    df["Hod√¥metro Inicial"] = df["Hod√¥metro Inicial"].apply(to_numeric_safe)

# Extrair Observa√ß√£o - Data e Observa√ß√£o - Km
if "Observa√ß√£o" in df.columns:
    extra = df["Observa√ß√£o"].apply(extract_obs)
    df["Observa√ß√£o - Data"] = extra.apply(lambda x: x[0])
    df["Observa√ß√£o - Km"] = extra.apply(lambda x: x[1])

# Km Rodado at√© Aferi√ß√£o = Observa√ß√£o - Km - Hod√¥metro Inicial
if {"Observa√ß√£o - Km", "Hod√¥metro Inicial"}.issubset(df.columns):
    df["Km Rodado at√© Aferi√ß√£o"] = df["Observa√ß√£o - Km"] - df["Hod√¥metro Inicial"]

# ------------------------------------
# Filtros laterais (opcional, √∫teis p/ analisar por recortes)
# ------------------------------------
st.sidebar.header("üîé Filtros")
def multiselect_or_all(label, series):
    vals = series.dropna().unique().tolist()
    if not vals:
        return []
    return st.sidebar.multiselect(label, vals, default=vals)

val_status = multiselect_or_all("Status", df["Status"]) if "Status" in df.columns else []
val_marca  = multiselect_or_all("Marca (Atual)", df["Marca (Atual)"]) if "Marca (Atual)" in df.columns else []
val_veic   = multiselect_or_all("Ve√≠culo - Descri√ß√£o", df["Ve√≠culo - Descri√ß√£o"]) if "Ve√≠culo - Descri√ß√£o" in df.columns else []

df_filtrado = df.copy()
if val_status:
    df_filtrado = df_filtrado[df_filtrado["Status"].isin(val_status)]
if val_marca:
    df_filtrado = df_filtrado[df_filtrado["Marca (Atual)"].isin(val_marca)]
if val_veic:
    df_filtrado = df_filtrado[df_filtrado["Ve√≠culo - Descri√ß√£o"].isin(val_veic)]

# ------------------------------------
# Abas
# ------------------------------------
abas = st.tabs([
    "üìå Indicadores Gerais",
    "üìä An√°lises por Status",
    "üè∑Ô∏è Marcas e Modelos",
    "üöö Ve√≠culos",
    "üìç Posi√ß√£o dos Pneus",
    "üèÜ Rankings",
    "üì• Exporta√ß√£o",
])

# ====================================
# 1) Indicadores Gerais
# ====================================
with abas[0]:
    st.subheader("üìå Indicadores Gerais")

    # Total de pneus (por 'Refer√™ncia' se existir; sen√£o linhas)
    total_pneus = df_filtrado["Refer√™ncia"].nunique() if "Refer√™ncia" in df_filtrado.columns else len(df_filtrado)

    # Contagem por status
    estoque = sucata = caminhao = 0
    if "Status" in df_filtrado.columns:
        vc = df_filtrado["Status"].value_counts()
        estoque  = int(vc.get("Estoque", 0))
        sucata   = int(vc.get("Sucata", 0))
        caminhao = int(vc.get("Caminh√£o", 0))

    # M√©tricas de sulco e km
    media_sulco = float(df_filtrado["Aferi√ß√£o - Sulco"].dropna().mean()) if "Aferi√ß√£o - Sulco" in df_filtrado.columns else np.nan
    media_km_afe = float(df_filtrado["Km Rodado at√© Aferi√ß√£o"].dropna().mean()) if "Km Rodado at√© Aferi√ß√£o" in df_filtrado.columns else np.nan
    max_km = float(df_filtrado["Km Rodado at√© Aferi√ß√£o"].dropna().max()) if "Km Rodado at√© Aferi√ß√£o" in df_filtrado.columns else np.nan
    min_sulco = float(df_filtrado["Aferi√ß√£o - Sulco"].dropna().min()) if "Aferi√ß√£o - Sulco" in df_filtrado.columns else np.nan

    c1, c2, c3, c4 = st.columns(4)
    c1.metric("Total de Pneus", f"{total_pneus:,}".replace(",", "."))
    c2.metric("Estoque", f"{estoque}")
    c3.metric("Sucata", f"{sucata}")
    c4.metric("Caminh√£o", f"{caminhao}")

    c5, c6, c7, c8 = st.columns(4)
    c5.metric("M√©dia de Sulco (mm)", f"{media_sulco:.2f}" if not np.isnan(media_sulco) else "‚Äî")
    c6.metric("M√©dia Km at√© Aferi√ß√£o", f"{media_km_afe:,.0f} km".replace(",", ".") if not np.isnan(media_km_afe) else "‚Äî")
    c7.metric("M√°ximo Km at√© Aferi√ß√£o", f"{max_km:,.0f} km".replace(",", ".") if not np.isnan(max_km) else "‚Äî")
    c8.metric("Menor Sulco", f"{min_sulco:.2f} mm" if not np.isnan(min_sulco) else "‚Äî")

# ====================================
# 2) An√°lises por Status
# ====================================
with abas[1]:
    st.subheader("üìä Distribui√ß√£o por Status")
    if "Status" in df_filtrado.columns and not df_filtrado.empty:
        base = df_filtrado["Status"].value_counts().rename_axis("Status").reset_index(name="Quantidade")
        base["%"] = 100 * base["Quantidade"] / base["Quantidade"].sum()

        col_g1, col_g2 = st.columns(2)
        with col_g1:
            fig_bar = px.bar(base, x="Status", y="Quantidade", text="Quantidade", title="Quantidade por Status")
            st.plotly_chart(fig_bar, use_container_width=True)
        with col_g2:
            fig_pie = px.pie(base, names="Status", values="Quantidade", title="Propor√ß√£o por Status", hole=0.4)
            st.plotly_chart(fig_pie, use_container_width=True)

        st.caption("Resumo por Status")
        st.dataframe(base, use_container_width=True)
    else:
        st.info("Coluna 'Status' n√£o encontrada ou n√£o h√° dados ap√≥s filtros.")

# ====================================
# 3) Marcas e Modelos
# ====================================
with abas[2]:
    st.subheader("üè∑Ô∏è Desgaste por Marca/Modelo")

    if "Aferi√ß√£o - Sulco" in df_filtrado.columns and "Marca (Atual)" in df_filtrado.columns:
        g_marca = df_filtrado.groupby("Marca (Atual)", dropna=True)["Aferi√ß√£o - Sulco"].mean().reset_index(name="Sulco M√©dio")
        fig_marca = px.bar(g_marca.sort_values("Sulco M√©dio", ascending=False),
                           x="Marca (Atual)", y="Sulco M√©dio", title="Sulco M√©dio por Marca")
        st.plotly_chart(fig_marca, use_container_width=True)
    else:
        st.info("Necess√°rio ter 'Aferi√ß√£o - Sulco' e 'Marca (Atual)'.")

    if "Km Rodado at√© Aferi√ß√£o" in df_filtrado.columns and "Modelo (Atual)" in df_filtrado.columns:
        g_modelo = df_filtrado.groupby("Modelo (Atual)", dropna=True)["Km Rodado at√© Aferi√ß√£o"].mean().reset_index(name="Km M√©dio at√© Aferi√ß√£o")
        fig_modelo = px.bar(g_modelo.sort_values("Km M√©dio at√© Aferi√ß√£o", ascending=False).head(20),
                            x="Modelo (Atual)", y="Km M√©dio at√© Aferi√ß√£o",
                            title="Top 20 Modelos por Km M√©dio at√© Aferi√ß√£o")
        st.plotly_chart(fig_modelo, use_container_width=True)
    else:
        st.info("Necess√°rio ter 'Km Rodado at√© Aferi√ß√£o' e 'Modelo (Atual)'.")

# ====================================
# 4) Ve√≠culos
# ====================================
with abas[3]:
    st.subheader("üöö Comparativo por Ve√≠culo")

    if "Ve√≠culo - Descri√ß√£o" in df_filtrado.columns and "Km Rodado at√© Aferi√ß√£o" in df_filtrado.columns:
        g_veic_sum = df_filtrado.groupby("Ve√≠culo - Descri√ß√£o", dropna=True)["Km Rodado at√© Aferi√ß√£o"].sum().reset_index(name="Km Total at√© Aferi√ß√£o")
        g_veic_mean = df_filtrado.groupby("Ve√≠culo - Descri√ß√£o", dropna=True)["Aferi√ß√£o - Sulco"].mean().reset_index(name="Sulco M√©dio")

        col_v1, col_v2 = st.columns(2)
        with col_v1:
            fig_v1 = px.bar(g_veic_sum.sort_values("Km Total at√© Aferi√ß√£o", ascending=False).head(20),
                            x="Ve√≠culo - Descri√ß√£o", y="Km Total at√© Aferi√ß√£o",
                            title="Top 20 Ve√≠culos por Km Total at√© Aferi√ß√£o")
            st.plotly_chart(fig_v1, use_container_width=True)
        with col_v2:
            if "Aferi√ß√£o - Sulco" in df_filtrado.columns:
                fig_v2 = px.bar(g_veic_mean.sort_values("Sulco M√©dio", ascending=True).head(20),
                                x="Ve√≠culo - Descri√ß√£o", y="Sulco M√©dio",
                                title="Top 20 Ve√≠culos com Menor Sulco M√©dio")
                st.plotly_chart(fig_v2, use_container_width=True)
            else:
                st.info("Necess√°rio ter 'Aferi√ß√£o - Sulco' para esta an√°lise.")
    else:
        st.info("Necess√°rio ter 'Ve√≠culo - Descri√ß√£o' e 'Km Rodado at√© Aferi√ß√£o'.")

# ====================================
# 5) Posi√ß√£o dos Pneus
# ====================================
with abas[4]:
    st.subheader("üìç Posi√ß√£o (Sigla) x Desgaste/Quilometragem")

    if "Sigla da Posi√ß√£o" in df_filtrado.columns:
        if "Km Rodado at√© Aferi√ß√£o" in df_filtrado.columns:
            g_pos_km = df_filtrado.groupby("Sigla da Posi√ß√£o", dropna=True)["Km Rodado at√© Aferi√ß√£o"].mean().reset_index(name="Km M√©dio at√© Aferi√ß√£o")
            fig_pk = px.bar(g_pos_km.sort_values("Km M√©dio at√© Aferi√ß√£o", ascending=False),
                            x="Sigla da Posi√ß√£o", y="Km M√©dio at√© Aferi√ß√£o",
                            title="Km M√©dio at√© Aferi√ß√£o por Posi√ß√£o")
            st.plotly_chart(fig_pk, use_container_width=True)
        if "Aferi√ß√£o - Sulco" in df_filtrado.columns:
            g_pos_sulco = df_filtrado.groupby("Sigla da Posi√ß√£o", dropna=True)["Aferi√ß√£o - Sulco"].mean().reset_index(name="Sulco M√©dio")
            fig_ps = px.bar(g_pos_sulco.sort_values("Sulco M√©dio", ascending=True),
                            x="Sigla da Posi√ß√£o", y="Sulco M√©dio",
                            title="Sulco M√©dio por Posi√ß√£o")
            st.plotly_chart(fig_ps, use_container_width=True)
    else:
        st.info("Coluna 'Sigla da Posi√ß√£o' n√£o encontrada.")

# ====================================
# 6) Rankings
# ====================================
with abas[5]:
    st.subheader("üèÜ Rankings")

    cols_show = [c for c in [
        "Refer√™ncia", "Marca (Atual)", "Modelo (Atual)",
        "Ve√≠culo - Descri√ß√£o", "Ve√≠culo - Placa",
        "Sigla da Posi√ß√£o", "Aferi√ß√£o - Sulco",
        "Hod√¥metro Inicial", "Observa√ß√£o - Km", "Km Rodado at√© Aferi√ß√£o"
    ] if c in df_filtrado.columns]

    # Top 5 por Km Rodado at√© Aferi√ß√£o
    if "Km Rodado at√© Aferi√ß√£o" in df_filtrado.columns:
        top_km = df_filtrado.sort_values("Km Rodado at√© Aferi√ß√£o", ascending=False).head(5)
        st.markdown("**Top 5 pneus que MAIS rodaram at√© a aferi√ß√£o**")
        st.dataframe(top_km[cols_show], use_container_width=True)
    else:
        st.info("Sem coluna 'Km Rodado at√© Aferi√ß√£o' para ranking de km.")

    # Top 5 pneus mais gastos (menor sulco)
    if "Aferi√ß√£o - Sulco" in df_filtrado.columns:
        top_gasto = df_filtrado.sort_values("Aferi√ß√£o - Sulco", ascending=True).head(5)
        st.markdown("**Top 5 pneus mais gastos (menor sulco)**")
        st.dataframe(top_gasto[cols_show], use_container_width=True)
    else:
        st.info("Sem coluna 'Aferi√ß√£o - Sulco' para ranking de sulco.")

# ====================================
# 7) Exporta√ß√£o
# ====================================
with abas[6]:
    st.subheader("üì• Exportar dados enriquecidos")
    st.write("O arquivo inclui as colunas derivadas **'Observa√ß√£o - Data'**, **'Observa√ß√£o - Km'** e **'Km Rodado at√© Aferi√ß√£o'** (quando dispon√≠veis).")
    data_xlsx = download_excel(df_filtrado.copy())
    st.download_button(
        label="üì• Baixar Excel enriquecido",
        data=data_xlsx,
        file_name="pneus_enriquecido.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )

# ------------------------------------
# Observa√ß√µes de compatibilidade
# ------------------------------------
# Requisitos m√≠nimos no requirements.txt:
# streamlit
# pandas
# plotly
# openpyxl
# xlsxwriter
