import streamlit as st
import pandas as pd
import plotly.express as px
import re

st.set_page_config(page_title="Gest√£o de Pneus", layout="wide")
st.title("üìä Gest√£o de Pneus - Dashboard Profissional")

# ----------------- UPLOAD -----------------
arquivo = st.file_uploader("Carregue a planilha de pneus", type=["xlsx", "xls"])

if arquivo:
    df = pd.read_excel(arquivo, engine="openpyxl")

    # ----------------- TRATAMENTO DE DADOS -----------------
    # Extrair km da coluna Observa√ß√£o
    df["Observa√ß√£o - Km"] = pd.to_numeric(df["Observa√ß√£o"].astype(str).str.extract(r"(\d+)\s*km")[0], errors='coerce')
    df["Km Rodado at√© Aferi√ß√£o"] = (df["Observa√ß√£o - Km"] - df["Hod√¥metro Inicial"]).fillna(0)
    df["Tipo Pneu"] = df["Vida"].fillna("Novo")

    # Criar coluna de alerta visual
    df["Alerta Sulco"] = pd.cut(df["Aferi√ß√£o - Sulco"],
                                bins=[-1, 2, 4, 100],
                                labels=["üî¥ Cr√≠tico", "üü° Aten√ß√£o", "üü¢ OK"])

    # ----------------- ABAS -----------------
    aba1, aba2, aba3, aba4 = st.tabs(["üìå Indicadores", "üìà Gr√°ficos", "üìë Tabela Completa", "üìä Hist√≥rico de Trocas"])

    # ----------------- INDICADORES -----------------
    with aba1:
        st.subheader("üìå KPIs Gerais")

        total_pneus = df["Refer√™ncia"].nunique()
        estoque = df["Status"].value_counts().get("Estoque", 0)
        sucata = df["Status"].value_counts().get("Sucata", 0)
        caminhao = df["Status"].value_counts().get("Caminh√£o", 0)

        col1, col2, col3, col4 = st.columns(4)
        col1.markdown(f"<h2 style='text-align:center; color:blue;'>{total_pneus}</h2><p style='text-align:center;'>Total Pneus</p>", unsafe_allow_html=True)
        col2.markdown(f"<h2 style='text-align:center; color:green;'>{estoque}</h2><p style='text-align:center;'>Estoque</p>", unsafe_allow_html=True)
        col3.markdown(f"<h2 style='text-align:center; color:orange;'>{sucata}</h2><p style='text-align:center;'>Sucata</p>", unsafe_allow_html=True)
        col4.markdown(f"<h2 style='text-align:center; color:purple;'>{caminhao}</h2><p style='text-align:center;'>Caminh√£o</p>", unsafe_allow_html=True)

        col5, col6, col7 = st.columns(3)
        media_sulco = df["Aferi√ß√£o - Sulco"].dropna().mean()
        media_km = df["Km Rodado at√© Aferi√ß√£o"].dropna().mean()
        pneus_criticos = df[df["Alerta Sulco"]=="üî¥ Cr√≠tico"]
        perc_critico = len(pneus_criticos) / len(df) * 100 if len(df) > 0 else 0

        col5.markdown(f"<h2 style='text-align:center; color:red;'>{len(pneus_criticos)}</h2><p style='text-align:center;'>Pneus Cr√≠ticos</p><p style='text-align:center;'>{perc_critico:.1f}%</p>", unsafe_allow_html=True)
        col6.markdown(f"<h2 style='text-align:center; color:green;'>{media_sulco:.2f} mm</h2><p style='text-align:center;'>M√©dia Sulco</p>", unsafe_allow_html=True)
        col7.markdown(f"<h2 style='text-align:center; color:blue;'>{media_km:,.0f} km</h2><p style='text-align:center;'>M√©dia Km Rodado</p>", unsafe_allow_html=True)

    # ----------------- GR√ÅFICOS -----------------
    with aba2:
        st.subheader("üìà Gr√°ficos Interativos")
        st.markdown("**Gr√°fico 1: Rela√ß√£o Km Rodado x Sulco**  \nMostra o desgaste do pneu em fun√ß√£o da quilometragem. Cada ponto representa um pneu, colorido pelo tipo de pneu.")

        fig1 = px.scatter(
            df,
            x="Km Rodado at√© Aferi√ß√£o",
            y="Aferi√ß√£o - Sulco",
            color="Tipo Pneu",
            hover_data=["Ve√≠culo - Placa", "Modelo (Atual)", "Marca (Atual)", "Status"],
            color_discrete_sequence=px.colors.qualitative.Set2,
            height=500
        )
        st.plotly_chart(fig1, use_container_width=True)

        st.markdown("**Gr√°fico 2: Distribui√ß√£o do Sulco por Marca**  \nPermite identificar marcas com maior durabilidade m√©dia.")
        fig2 = px.box(
            df,
            x="Marca (Atual)",
            y="Aferi√ß√£o - Sulco",
            color="Marca (Atual)",
            color_discrete_sequence=px.colors.qualitative.Pastel,
            height=500
        )
        st.plotly_chart(fig2, use_container_width=True)

    # ----------------- TABELA -----------------
    with aba3:
        st.subheader("üìë Tabela Completa")
        filtro_status = st.multiselect("Filtrar por Status", options=df["Status"].unique(), default=df["Status"].unique())
        filtro_veiculo = st.multiselect("Filtrar por Ve√≠culo", options=df["Ve√≠culo - Placa"].unique(), default=df["Ve√≠culo - Placa"].unique())
        df_filtrado = df[df["Status"].isin(filtro_status) & df["Ve√≠culo - Placa"].isin(filtro_veiculo)]

        def colorir_sulco(val):
            if val == "üî¥ Cr√≠tico":
                return "background-color:#FF6B6B; color:white"
            elif val == "üü° Aten√ß√£o":
                return "background-color:#FFD93D; color:black"
            elif val == "üü¢ OK":
                return "background-color:#6BCB77; color:white"
            return ""

        st.dataframe(df_filtrado.style.applymap(colorir_sulco, subset=["Alerta Sulco"]), use_container_width=True)

    # ----------------- HIST√ìRICO DE TROCAS -----------------
    with aba4:
        st.subheader("üìä Hist√≥rico de Trocas e Vida √ötil")
        resumo = df.groupby("Tipo Pneu")["Km Rodado at√© Aferi√ß√£o"].agg(
            Total_Pneus="count",
            Km_M√©dio="mean",
            Km_M√≠nimo="min",
            Km_M√°ximo="max"
        ).reset_index()

        resumo["Km_M√©dio"] = resumo["Km_M√©dio"].apply(lambda x: f"{x:,.0f} km")
        resumo["Km_M√≠nimo"] = resumo["Km_M√≠nimo"].apply(lambda x: f"{x:,.0f} km")
        resumo["Km_M√°ximo"] = resumo["Km_M√°ximo"].apply(lambda x: f"{x:,.0f} km")

        st.dataframe(resumo, use_container_width=True)

        fig3 = px.bar(
            df.groupby("Tipo Pneu")["Km Rodado at√© Aferi√ß√£o"].mean().reset_index(),
            x="Tipo Pneu",
            y="Km Rodado at√© Aferi√ß√£o",
            text="Km Rodado at√© Aferi√ß√£o",
            color="Tipo Pneu",
            color_discrete_sequence=px.colors.qualitative.Set2,
            height=500
        )
        fig3.update_traces(texttemplate='%{y:.0f} km', textposition='outside')
        st.plotly_chart(fig3, use_container_width=True)
