import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Painel Completo de Manuten√ß√£o e Pneus", layout="wide")

st.title("üöõ Painel Completo de Manuten√ß√£o e Movimenta√ß√£o de Pneus")
st.markdown("‚¨ÜÔ∏è Fa√ßa upload da planilha com abas 'manutencao' e 'pneu' para an√°lise completa")

uploaded_file = st.file_uploader("Carregue sua planilha Excel (.xlsx)", type=["xlsx"])

if uploaded_file:
    xls = pd.ExcelFile(uploaded_file)

    if 'manutencao' in xls.sheet_names and 'pneu' in xls.sheet_names:
        df_manut = pd.read_excel(xls, sheet_name='manutencao')
        df_pneu = pd.read_excel(xls, sheet_name='pneu')

        # --- Normaliza√ß√£o colunas ---
        df_manut.columns = df_manut.columns.str.strip().str.upper()
        df_pneu.columns = df_pneu.columns.str.strip().str.upper()

        # --- Convers√£o datas ---
        if 'DATA DA MANUTEN√á√ÉO' in df_manut.columns:
            df_manut['DATA DA MANUTEN√á√ÉO'] = pd.to_datetime(df_manut['DATA DA MANUTEN√á√ÉO'], errors='coerce')
        if 'DATA DA MOVIMENTA√á√ÉO' in df_pneu.columns:
            df_pneu['DATA DA MOVIMENTA√á√ÉO'] = pd.to_datetime(df_pneu['DATA DA MOVIMENTA√á√ÉO'], errors='coerce')

        # --- Converter VALOR para num√©rico ---
        if 'VALOR' in df_pneu.columns:
            df_pneu['VALOR'] = pd.to_numeric(df_pneu['VALOR'], errors='coerce')

        # --- Ajustar coluna PLACA ---
        for df in [df_manut, df_pneu]:
            if 'VE√çCULO - PLACA' in df.columns:
                df.rename(columns={'VE√çCULO - PLACA': 'PLACA'}, inplace=True)

        # --- Check colunas essenciais ---
        if 'PLACA' not in df_manut.columns or 'PLACA' not in df_pneu.columns:
            st.error("‚ùå Coluna PLACA √© obrigat√≥ria nas abas 'manutencao' e 'pneu'")
            st.stop()

        # --- Filtros no sidebar ---
        placas = sorted(set(df_manut['PLACA'].dropna().unique()) | set(df_pneu['PLACA'].dropna().unique()))
        selected_placas = st.sidebar.multiselect("Filtrar por Placas", placas, default=placas)

        # Datas m√≠nimas e m√°ximas
        data_min_manut = df_manut['DATA DA MANUTEN√á√ÉO'].min() if 'DATA DA MANUTEN√á√ÉO' in df_manut.columns else None
        data_max_manut = df_manut['DATA DA MANUTEN√á√ÉO'].max() if 'DATA DA MANUTEN√á√ÉO' in df_manut.columns else None
        data_min_pneu = df_pneu['DATA DA MOVIMENTA√á√ÉO'].min() if 'DATA DA MOVIMENTA√á√ÉO' in df_pneu.columns else None
        data_max_pneu = df_pneu['DATA DA MOVIMENTA√á√ÉO'].max() if 'DATA DA MOVIMENTA√á√ÉO' in df_pneu.columns else None
        data_min = min(filter(None, [data_min_manut, data_min_pneu]))
        data_max = max(filter(None, [data_max_manut, data_max_pneu]))
        selected_datas = st.sidebar.date_input("Intervalo de datas", [data_min, data_max])

        # Tipo manuten√ß√£o e movimenta√ß√£o
        manut_types = df_manut['DESCRI√á√ÉO DA MANUTEN√á√ÉO'].dropna().unique() if 'DESCRI√á√ÉO DA MANUTEN√á√ÉO' in df_manut.columns else []
        selected_manut_types = st.sidebar.multiselect("Tipos de Manuten√ß√£o", manut_types, default=manut_types)

        pneu_mov_types = df_pneu['TIPO DA MOVIMENTA√á√ÉO'].dropna().unique() if 'TIPO DA MOVIMENTA√á√ÉO' in df_pneu.columns else []
        selected_pneu_mov_types = st.sidebar.multiselect("Tipos de Movimenta√ß√£o Pneus", pneu_mov_types, default=pneu_mov_types)

        marcas = df_pneu['MARCA'].dropna().unique() if 'MARCA' in df_pneu.columns else []
        selected_marcas = st.sidebar.multiselect("Marcas de Pneus", marcas, default=marcas)

        # Aplicar filtros
        if selected_placas:
            df_manut = df_manut[df_manut['PLACA'].isin(selected_placas)]
            df_pneu = df_pneu[df_pneu['PLACA'].isin(selected_placas)]

        if len(selected_datas) == 2:
            start_date, end_date = pd.to_datetime(selected_datas[0]), pd.to_datetime(selected_datas[1])
            if 'DATA DA MANUTEN√á√ÉO' in df_manut.columns:
                df_manut = df_manut[
                    (df_manut['DATA DA MANUTEN√á√ÉO'] >= start_date) & (df_manut['DATA DA MANUTEN√á√ÉO'] <= end_date)]
            if 'DATA DA MOVIMENTA√á√ÉO' in df_pneu.columns:
                df_pneu = df_pneu[
                    (df_pneu['DATA DA MOVIMENTA√á√ÉO'] >= start_date) & (df_pneu['DATA DA MOVIMENTA√á√ÉO'] <= end_date)]

        if selected_manut_types:
            df_manut = df_manut[df_manut['DESCRI√á√ÉO DA MANUTEN√á√ÉO'].isin(selected_manut_types)]
        if selected_pneu_mov_types:
            df_pneu = df_pneu[df_pneu['TIPO DA MOVIMENTA√á√ÉO'].isin(selected_pneu_mov_types)]
        if selected_marcas:
            df_pneu = df_pneu[df_pneu['MARCA'].isin(selected_marcas)]

        st.header("üìà Indicadores Gerais")

        # KPIs Manuten√ß√£o
        total_manut = len(df_manut)
        st.metric("Total de Manuten√ß√µes", total_manut)

        # M√©dia de KM entre manuten√ß√µes
        if 'KM DO VE√çCULO' in df_manut.columns and total_manut > 1:
            km_medios = df_manut.groupby('PLACA')['KM DO VE√çCULO'].apply(lambda x: x.sort_values().diff().mean())
            st.metric("KM M√©dio entre Manuten√ß√µes (m√©dia geral)", f"{km_medios.mean():,.0f} km")

        # KPIs Pneus
        total_pneu = len(df_pneu)
        st.metric("Total de Movimenta√ß√µes de Pneus", total_pneu)

        if 'VALOR' in df_pneu.columns:
            valor_total = df_pneu['VALOR'].sum()
            st.metric("Valor Total Gasto em Pneus (R$)", f"{valor_total:,.2f}")

        # Autonomia: alertas para pneus com autonomia baixa
        if 'AUTONOMIA' in df_pneu.columns:
            df_pneu['AUTONOMIA'] = pd.to_numeric(df_pneu['AUTONOMIA'], errors='coerce')
            alert_pneus = df_pneu[df_pneu['AUTONOMIA'] < 5000]  # exemplo limiar 5000 km
            st.subheader("‚ö†Ô∏è Pneus com Autonomia Baixa (< 5000 km)")
            st.dataframe(alert_pneus[['REFER√äNCIA DO PNEU', 'PLACA', 'AUTONOMIA', 'DATA DA MOVIMENTA√á√ÉO']])

        # --- Gr√°ficos interativos ---

        abas = st.tabs(["Resumo", "Manuten√ß√µes", "Movimenta√ß√£o Pneus", "An√°lise Temporal", "Detalhamento"])

        with abas[0]:
            st.subheader("Resumo por Ve√≠culo")

            # Manuten√ß√µes por ve√≠culo
            manut_placa = df_manut.groupby('PLACA').size().reset_index(name='Qtd Manuten√ß√µes')
            # Pneus por ve√≠culo
            pneu_placa = df_pneu.groupby('PLACA').size().reset_index(name='Qtd Movimenta√ß√µes Pneus')

            resumo = pd.merge(manut_placa, pneu_placa, on='PLACA', how='outer').fillna(0)
            st.dataframe(resumo)

            # Gr√°fico barras com manuten√ß√µes e pneus por ve√≠culo
            fig = px.bar(resumo.melt(id_vars='PLACA', value_vars=['Qtd Manuten√ß√µes', 'Qtd Movimenta√ß√µes Pneus']),
                         x='PLACA', y='value', color='variable',
                         title='Quantidade de Manuten√ß√µes e Movimenta√ß√µes de Pneus por Ve√≠culo')
            st.plotly_chart(fig, use_container_width=True)

        with abas[1]:
            st.subheader("Manuten√ß√µes - Detalhes e Tipos")

            # Frequ√™ncia manuten√ß√µes por tipo
            manut_tipo = df_manut['DESCRI√á√ÉO DA MANUTEN√á√ÉO'].value_counts().reset_index()
            manut_tipo.columns = ['Tipo de Manuten√ß√£o', 'Quantidade']
            st.dataframe(manut_tipo)

            # Gr√°fico pizza
            fig_pizza = px.pie(manut_tipo, names='Tipo de Manuten√ß√£o', values='Quantidade', title='Distribui√ß√£o dos Tipos de Manuten√ß√£o')
            st.plotly_chart(fig_pizza, use_container_width=True)

        with abas[2]:
            st.subheader("Movimenta√ß√£o de Pneus - Tipos e Valores")

            pneu_tipo = df_pneu['TIPO DA MOVIMENTA√á√ÉO'].value_counts().reset_index()
            pneu_tipo.columns = ['Tipo de Movimenta√ß√£o', 'Quantidade']
            st.dataframe(pneu_tipo)

            fig_bar = px.bar(pneu_tipo, x='Tipo de Movimenta√ß√£o', y='Quantidade', title='Movimenta√ß√£o de Pneus por Tipo')
            st.plotly_chart(fig_bar, use_container_width=True)

            if 'VALOR' in df_pneu.columns:
                valor_placa = df_pneu.groupby('PLACA')['VALOR'].sum().reset_index()
                fig_valor = px.bar(valor_placa, x='PLACA', y='VALOR', title='Valor Total Gasto em Pneus por Ve√≠culo')
                st.plotly_chart(fig_valor, use_container_width=True)

        with abas[3]:
            st.subheader("An√°lise Temporal")

            # Manuten√ß√µes ao longo do tempo
            if 'DATA DA MANUTEN√á√ÉO' in df_manut.columns:
                fig_tempo_manut = px.histogram(df_manut, x='DATA DA MANUTEN√á√ÉO', color='PLACA',
                                              title='Manuten√ß√µes ao longo do tempo', nbins=30)
                st.plotly_chart(fig_tempo_manut, use_container_width=True)

            # Movimenta√ß√£o pneus ao longo do tempo
            if 'DATA DA MOVIMENTA√á√ÉO' in df_pneu.columns:
                fig_tempo_pneu = px.histogram(df_pneu, x='DATA DA MOVIMENTA√á√ÉO', color='TIPO DA MOVIMENTA√á√ÉO',
                                             title='Movimenta√ß√£o de Pneus ao longo do tempo', nbins=30)
                st.plotly_chart(fig_tempo_pneu, use_container_width=True)

        with abas[4]:
            st.subheader("Detalhamento Completo dos Dados")

            st.markdown("**Dados de Manuten√ß√£o**")
            st.dataframe(df_manut)

            st.markdown("**Dados de Movimenta√ß√£o de Pneus**")
            st.dataframe(df_pneu)

    else:
        st.error("A planilha deve conter abas chamadas exatamente 'manutencao' e 'pneu'.")
else:
    st.info("Por favor, fa√ßa upload da planilha para iniciar a an√°lise.")
